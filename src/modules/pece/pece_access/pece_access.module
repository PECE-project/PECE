<?php

/**
 * @file
 * Code for the PECE Access.
 */

/**
 * The Contributor role name.
 */
define('PECE_CONTRIBUTOR', 'Contributor');

/**
 * The Researcher role name.
 */
define('PECE_RESEARCHER', 'Researcher');

/**
 * The access realm of group member.
 */
define('PECE_ACCESS_REALM', 'pece_access');

/**
 * The only members access.
 */
define('PECE_ACCESS_REALM_ONLY_GROUP_MEMBERS', PECE_ACCESS_REALM . ':only-group-members:node');

/**
 * The all users access.
 */
define('PECE_ACCESS_REALM_ALL', PECE_ACCESS_REALM . ':all:node');

/**
 * The all researcher users access.
 */
define('PECE_ACCESS_REALM_RESEARCHER_MEMBER', PECE_ACCESS_REALM . ':researcher:node');

/**
 * The all contributors users access.
 */
define('PECE_ACCESS_REALM_CONTRIBUTOR_MEMBER', PECE_ACCESS_REALM . ':contributor:node');

/**
 * The all researcher in the content's group can access.
 */
define('PECE_ACCESS_REALM_RESEARCHER_IN_GROUP_MEMBER', PECE_ACCESS_REALM . ':researcher-in-group:node');

/**
 * The content owner access realm.
 */

define('PECE_ACCESS_REALM_OWNER', PECE_ACCESS_REALM . ':owner:node');

/**
 * The field that defines access on nodes.
 */
define('PECE_ACCESS_FIELD', 'field_permissions');

/**
 * Implements hook_node_insert().
 */
function pece_access_node_insert($node) {
  _pece_access_node_save($node);
}

/**
 * Implements hook_node_update().
 */
function pece_access_node_update($node) {
  _pece_access_node_save($node);

  //rebuild permissions to PECE Essay
  if ($node->type == "pece_essay" || $node->type == "pece_artifact_text") {
    node_access_rebuild_bonus_queue([$node->nid]);
  }

  if ($node->type == 'pece_group') {
    $nodes = pece_access_get_nodes_by_group($node->nid);
    node_access_rebuild_bonus_queue($nodes);
  }
}

/**
 * Executed when nodes are inserted/updated.
 */
function _pece_access_node_save($node) {
  pece_access_refresh_node_files_access($node);
}

/**
 * Recalculate the access control scheme of a node's files.
 */
function pece_access_refresh_node_files_access($node) {
  // Update the node access table for this node before refreshing access.
  node_access_acquire_grants($node);

  $restricted_types = pece_access_restricted_node_types();

  // Do nothing if saving has no access control.
  if (!in_array($node->type, $restricted_types)) {
    return;
  }

  $query = db_select('file_usage', 'fu');
  $query->fields('fu', array('fid'));
  $query->condition('fu.type', 'node');
  $query->condition('fu.id', $node->nid);
  $query->distinct();

  $node_files = $query->execute()->fetchCol();

  // Trigger file access refresh on any file present on the saving node.
  foreach ($node_files as $fid) {
    pece_access_refresh_file_access($fid);
  }
}

/**
 * Recalculate the access control scheme of a file.
 *
 */
function pece_access_refresh_file_access($file) {
  $file = is_object($file) ? $file : file_load($file);
  $file_is_public = file_uri_scheme($file->uri) == 'public';
  $file_should_be_public = pece_access_file_is_public($file);

  // If current scheme differs from what should be, move the file.
  if ($file_is_public !== $file_should_be_public) {
    $scheme = $file_should_be_public ? 'public' : 'private';
    pece_access_move_file($file, $scheme);
  }
}

/**
 * Move a file form public to private and vice-versa.
 */
function pece_access_move_file($file, $scheme) {
  $original_scheme = ($scheme == 'public') ? 'private' : 'public';
  $destination = str_replace($original_scheme . '://', $scheme .'://', $file->uri);
  $directory = rtrim(drupal_dirname($destination), '/\\');

  // Check if directory exists.
  if (!is_dir($directory)) {
    // Let mkdir() recursively create directories and use the default directory permissions.
    if (@drupal_mkdir($directory, NULL, TRUE)) {
      drupal_chmod($directory);
    }
  }

  if (file_move($file, $destination)) {
    drupal_set_message(t('The file was moved from %from to %dest.', array(
      '%from' => $original_scheme,
      '%dest' => $scheme,
    )));
  }
}

/**
 * Check whether a file should be public or private. We do it by checking if an
 * anonymous user should have access to the file.
 */
function pece_access_file_is_public($file) {
  return pece_access_file_is_visible($file, drupal_anonymous_user());
}

/**
 * Check if a file should be accessbile to the given user.
 */
function pece_access_file_is_visible($file, $account = NULL) {
  if (!isset($account)) {
    $account = $GLOBALS['user'];
  }

  $file = is_object($file) ? $file : file_load($file);

  $query = db_select('file_usage', 'fu');
  $query->fields('fu', array('id'));
  $query->condition('fu.type', 'node');
  $query->condition('fu.fid', $file->fid);
  $query->distinct();

  $file_nids = $query->execute()->fetchCol();
  $file_nodes = node_load_multiple($file_nids);
  $user_can_view_file = TRUE;

  // Apply deny first for any node that uses this file.
  foreach ($file_nodes as $node) {
    if (!node_access('view', $node, $account)) {
      $user_can_view_file = FALSE;
      break;
    }
  }

  return $user_can_view_file;
}

/**
 * Implements hook_file_entity_access().
 */
function pece_access_file_entity_access($op, $file, $account) {
  if ($op != 'view') {
    return FILE_ENTITY_ACCESS_IGNORE;
  }

  $file_is_visible = pece_access_file_is_visible($file, $account);
  return $file_is_visible ? FILE_ENTITY_ACCESS_ALLOW : FILE_ENTITY_ACCESS_DENY;
}

/**
 * Helper function to provide a list of restricted node types.
 */
function pece_access_restricted_node_types() {
  $field = field_info_field(PECE_ACCESS_FIELD);
  return drupal_map_assoc($field['bundles']['node']);
}

/**
 * Implements hook_node_access_records().
 */
function pece_access_node_access_records($node) {
  $grants = array();

  // Only control access for specific types.
  $restricted_types = pece_access_restricted_node_types();
  if (empty($node->type) || !in_array($node->type, $restricted_types)) {
    return $grants;
  }

  $visibility = pece_access_get_node_visibility($node);

  $grants[] = array(
    'realm' => PECE_ACCESS_REALM_OWNER,
    'gid' => $node->uid,
    'grant_view' => 1,
    'grant_update' => 1,
    'grant_delete' => 1,
    'priority' => 0,
  );

  switch ($visibility['realm']) {
    case PECE_ACCESS_REALM_ALL:
      $grants[] = array(
        'realm' => PECE_ACCESS_REALM_ALL,
        'gid' => 0,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      );
      break;
    case PECE_ACCESS_REALM_ONLY_GROUP_MEMBERS:
      $groups = $visibility[0] + $visibility[1];
      foreach ($groups as $gid => $group) {
        $grants[] = array(
          'realm' => PECE_ACCESS_REALM_ONLY_GROUP_MEMBERS,
          'gid' => $gid,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 0,
        );
      }
      break;
    case PECE_ACCESS_REALM_RESEARCHER_MEMBER:
      $grants[] = array(
        'realm' => PECE_ACCESS_REALM_RESEARCHER_MEMBER,
        'gid' => 0,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      );
      break;
    case PECE_ACCESS_REALM_RESEARCHER_IN_GROUP_MEMBER:
      $groups = $visibility[0] + $visibility[1];
      foreach ($groups as $gid => $group) {
        $grants[] = array(
          'realm' => PECE_ACCESS_REALM_RESEARCHER_IN_GROUP_MEMBER,
          'gid' => $gid,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 0,
        );
      }
      break;
  }

  // If content visibility is not private then add access to contributors
  if ($visibility['realm'] != PECE_ACCESS_REALM_OWNER) {
    $contributors = field_get_items('node', $node, 'field_pece_contributors');
    $insert = array();
    if ($contributors && count($contributors) > 0) {
      foreach ($contributors as $contributor) {
        if (!key_exists($contributor['target_id'], $insert)) {
          $grants[] = [
            'realm' => PECE_ACCESS_REALM_CONTRIBUTOR_MEMBER,
            'gid' => $contributor['target_id'],
            'grant_view' => 1,
            'grant_update' => 0,
            'grant_delete' => 0,
            'priority' => 0,
          ];
          $insert[$contributor['target_id']] = TRUE;
        }
      }
    }
  }

  return $grants;
}

/**
 * Implements hook_node_grants().
 */
function pece_access_node_grants($account, $op) {
  if ($op != 'view') {
    return;
  }

  $grants = array();
  $groups = og_get_entity_groups('user', $account);
  $isResearcher = pece_access_user_has_role($account, 'Researcher');

  // 1. Allow access to all nodes that belong to public groups, regardless of other
  // groups they might belong to.
  $grants[PECE_ACCESS_REALM_ALL][] = 0;

  // 2. Allow access for all authenticated user in your group content
  if (key_exists('node', $groups)) {
    foreach ($groups['node'] as $group_id) {
      $grants[PECE_ACCESS_REALM_ONLY_GROUP_MEMBERS][] = $group_id;
      //3. If user is researcher the he has the PECE_ACCESS_REALM_RESEARCHER_IN_GROUP_MEMBER grants
      if ($isResearcher) {
        $grants[PECE_ACCESS_REALM_RESEARCHER_IN_GROUP_MEMBER][] = $group_id;
      }
    }
  }

  // 4. Allow access for 'Researcher' users to any restricted content in the groups
  // they belong to.
  if ($isResearcher) {
    $grants[PECE_ACCESS_REALM_RESEARCHER_MEMBER][] = 0;
  }

  // 5. Allows access to any of the user's own content.
  $grants[PECE_ACCESS_REALM_OWNER][] = $account->uid;

  return $grants;
}

/**
 * Helper (performatic) method to get the field permission value for a node.
 * @TODO: Use db_query for better performance.
 */
function pece_access_get_permission($node) {
  $table = 'field_data_' . PECE_ACCESS_FIELD;
  $column = PECE_ACCESS_FIELD . '_value';

  $query = db_select($table, 'p');
  $query->fields('p', array($column));
  $query->condition('p.entity_type', 'node');
  $query->condition('p.entity_id', $node->nid);
  $query->range(0, 1);
  $result = $query->execute()->fetch();

  return !empty($result) ? $result->$column : FALSE;
}

/**
 * Helper (performatic) method to get content visibility.
 *
 * @param $node
 * @return array with value to node visibility and groups.
 *  [
 *    realm => realm permission for this node
 *    0 => array with all the public groups with their visibility content value
 *    1 => array with all the private groups with their visibility content value
 * ]
 */
function pece_access_get_node_visibility($node) {
  // Start structure to return
  $contentVisibility = array(
    'realm' => PECE_ACCESS_REALM_OWNER,
    0 => array(),
    1 => array()
  );
  // Get node permission: open, private or restricted.
  $permission = pece_access_get_permission($node);
  $node_override_group = NULL;
  // Get node's groups
  /* @var int gavalue Group visibility
   * 0 -> group public
   * 1 -> group private
   */
  /* @var int gcavalue Group content visibility
   * 0 -> use group default
   * 1 -> public content
   * 2 -> private content
   */
  $sql = "SELECT ogm.gid AS gid, ga.group_access_value AS gavalue, gca.group_content_access_value AS gcavalue
    FROM og_membership ogm
    LEFT OUTER JOIN field_data_group_access ga ON ga.entity_id = ogm.gid
    LEFT OUTER JOIN field_data_group_content_access gca ON gca.entity_id = ogm.gid
    WHERE (ga.entity_type = 'node')
    AND (ogm.entity_type = 'node')
    AND (ogm.etid = {$node->nid})";

  $results = db_query($sql);

  switch ($permission) {
    case 'open':
      $contentVisibility['realm'] = PECE_ACCESS_REALM_ALL;
      break;
    case 'private':
      $contentVisibility['realm'] = PECE_ACCESS_REALM_OWNER;
      break;
    case 'restricted':
      $contentVisibility['realm'] = PECE_ACCESS_REALM_RESEARCHER_MEMBER;
      break;
  }

  // Override group permissioning based on node group_content_access.
  if (isset($node->group_content_access)) {
    /* @var int $node_override_group
     * 0 -> Default group permissions
     * 1 -> Public to all users
     * 2 -> Only groups members and private group restrictions
     * */
    $node_override_group = field_get_items('node', $node, 'group_content_access');
    if (!empty($value[0]['value'])) {
      $node_override_group = $value[0]['value'];
      $contentVisibility['realm'] == ($node_override_group == 1) ? PECE_ACCESS_REALM_ALL : PECE_ACCESS_REALM_ONLY_GROUP_MEMBERS;
    }
    else
      $node_override_group = 0;
  }

  // If content hasn't groups then finish the visibility process
  $results = $results->fetchAll();
  if (count($results) == 0)
    return $contentVisibility;

  // Values to gcavalue
  $groupContentAccess = array('default', 'public', 'private');

  switch ($permission) {
    case 'private':
      // If content is private then finish the visibility process
      return $contentVisibility;
      break;
    case 'restricted':
      foreach ($results as $result) {
        // Add group in the private groups variables
        $contentVisibility[$result->gavalue][$result->gid] = array(
          'visibility' => $groupContentAccess[$result->gcavalue]
        );

        // If node override group permissions with all user can access then go to next group in foreach
        if ($node_override_group == 1)
          continue;

        // if group is private
        if ($result->gavalue) {
          // If group is private and the group content is public
          if ($groupContentAccess[$result->gcavalue] == 'public')
            //only the researcher can access this content, researcher DOESN'T need is in the group
            $contentVisibility['realm'] = PECE_ACCESS_REALM_RESEARCHER_MEMBER;
          else
            //else the content is default or private then only researcher IN GROUP can has access
            $contentVisibility['realm'] = PECE_ACCESS_REALM_RESEARCHER_IN_GROUP_MEMBER;
        }
        // else group is public
        else {
          // If group is public and the group content is private
          if ($groupContentAccess[$result->gcavalue] == 'private')
            //only researcher IN GROUP can has access
            $contentVisibility['realm'] = PECE_ACCESS_REALM_RESEARCHER_IN_GROUP_MEMBER;
          else
            //else the content is default or public then only the researcher can access this content, researcher DOESN'T need is in the group
            $contentVisibility['realm'] = PECE_ACCESS_REALM_RESEARCHER_MEMBER;
        }
      }
      break;
    case 'open':
      // Start with this visibility because if has public permission is need change
      $contentVisibility['realm'] = PECE_ACCESS_REALM_ONLY_GROUP_MEMBERS;
      foreach ($results as $result) {
        // Add group in the private groups variables
        $contentVisibility[$result->gavalue][$result->gid] = array(
          'visibility' => $groupContentAccess[$result->gcavalue]
        );

        // If node override group permissions then go to next group in foreach
        if ($node_override_group)
          continue;

        // if group is private
        if ($result->gavalue) {
          //and group is private and the group content is public then change to all user can access
          if ($groupContentAccess[$result->gcavalue] == 'public')
            $contentVisibility['realm'] = PECE_ACCESS_REALM_ALL;
        }
        // else group is public
        else {
          // If the content is default or public then all users can access
          if ($groupContentAccess[$result->gcavalue] == 'default'  || $groupContentAccess[$result->gcavalue] == 'public')
            $contentVisibility['realm'] = PECE_ACCESS_REALM_ALL;
        }
      }
      break;
  }

  return $contentVisibility;
}

/**
 * Helper (performatic) method to get nodes with this group.
 *
 * @return {Array} a map of nodes with this group
 */
function pece_access_get_nodes_by_group($gid) {
  $sql = "SELECT ogm.etid AS etid, ga.group_access_value AS gavalue
    FROM og_membership ogm
    LEFT OUTER JOIN field_data_group_access ga ON ga.entity_id = ogm.gid
    WHERE (ga.entity_type = 'node')
    AND (ogm.entity_type = 'node')
    AND (ogm.gid = {$gid})";

  $results = db_query($sql);
  $nodes = array();

  foreach ($results as $result) {
    $nodes[] = $result->etid;
  }

  return $nodes;
}

/**
 * Helper (performatic) method to check if user has a role.
 * @TODO: Use db_query for better performance.
 */
function pece_access_user_has_role($user, $role) {
  // 1. Easy way out using the user object.
  if (isset($user->roles) && in_array($role, $user->roles)) {
    return TRUE;
  }

  // 2. Fallback method using databse querying.
  $query = db_select('users', 'u');
  $query->fields('u', array('uid'));
  $query->range(0, 1);

  $query->leftJoin('users_roles', 'ur', 'u.uid = ur.uid');
  $query->leftJoin('role', 'r', 'ur.rid = r.rid');

  $query->condition('u.uid', $user->uid);
  $query->condition('r.name', $role);

  return !empty($query->execute()->fetchAll());
}

/**
 * Implement hook_og_user_access_alter().
 */
function pece_access_og_user_access_alter(&$perms, $context) {
  pece_access_allow_contibutors_edit_content($perms, $context);
}

/**
 * Override OG Group Content permissions to allow editing content for its
 * contributors.
 */
function pece_access_allow_contibutors_edit_content(&$perms, $context) {
  // Filter OG Permissions for essay contents.
  if (strstr($context['string'], 'update') && strstr($context['string'], '_essay')) {
    $contributors = array();
    if (arg(0) === 'node' && is_numeric(arg(1))) {
      $node = node_load(arg(1));
    }
    if (!is_object($node)) {
      return;
    }
    $contributors = field_get_items('node', $node, 'field_pece_contributors');
    foreach ($contributors as $contributor) {
      if ($contributor['target_id'] == $context['account']->uid) {
        // Override OG Content default permissions.
        $perms[$context['string']] = TRUE;
      }
    }
  }
}

/**
 *  Implements node access to PECE Essay and Artifacts to use the panels from contributors
 * @param $node
 * @param $op
 * @param $account
 *
 * @return string|null
 */
function pece_access_node_access($node, $op, $account) {
  // $node can be string or object, in this case we need object
  $type = is_object($node) ? $node->type : NULL;

  if (($type == "pece_essay" || $type == "pece_artifact_text") && in_array($type, node_permissions_get_configured_types())) {

    $permission = pece_access_get_permission($node);
    if ($permission == 'private' && $account->uid != $node->uid)
      return NODE_ACCESS_DENY;

    if ($op != 'delete') {
      $contributors = field_get_items('node', $node, 'field_pece_contributors');
      foreach ($contributors as $contributor) {
        if ($contributor['target_id'] == $account->uid) {
          return NODE_ACCESS_ALLOW;
        }
      }
    }
  }

  // Returning nothing from this function would have the same effect.
  return NODE_ACCESS_IGNORE;
}
