<?php
/**
 * @file
 * Contains \Drupal\pece_migrate\Plugin\migrate\source\Node.
 */
namespace  Drupal\pece_migrate\Plugin\migrate\source;
use Drupal\migrate\Row;
use Drupal\node\Plugin\migrate\source\d7\NodeComplete as D7Node;
use Drupal\Tests\Component\Annotation\Doctrine\Ticket\Doctrine\ORM\Entity;
use Exception;

/**
 * Gets all node revisions from the source, including translation revisions.
 *
 * @MigrateSource(
 *   id = "v1_node",
 *   source_module = "node"
 * )
 */
class Node extends D7Node {

  const ROLE_RESEARCHER = 'researcher';
  const ROLE_CONTRIBUTOR = 'contributor';
  const PERMISSION_RESTRICTED = 'restricted';
  const PERMISSION_PRIVATE = 'private';
  const PERMISSION_OPEN = 'open';

  protected $permissionByUserView = [];

  public function query() {
    $query =  parent::query(); // TODO: Change the autogenerated stub

    return $query;
  }

  /**
   * {@inheritdoc}
   */
  public function fields() {
    $fields = parent::fields() + ['alias' => $this->t('Path alias')];
    $fields += ['permission_by_group_view' => $this->t('Permission by group')];
    $fields += ['permission_by_user_view' => $this->t('Permission by user')];
    $fields += ['permission_by_role_view' => $this->t('Permission by role')];
    $fields += ['permission_all_user_view' => $this->t('Permission for all users')];
    return $fields;
  }

  /**
   * {@inheritdoc}
   * @throws Exception
   */
  public function prepareRow(Row $row) {
    // Include path alias.
    $nid = $row->getSourceProperty('nid');
    $query = $this->select('url_alias', 'ua')
      ->fields('ua', ['alias']);
    $query->condition('ua.source', 'node/' . $nid);
    $alias = $query->execute()->fetchField();
    if (!empty($alias)) {
      $row->setSourceProperty('alias', '/' . $alias);
    }

    // Check permissions
    $query = $this->select('field_data_field_permissions', 'fdfp')
      ->fields('fdfp', ['field_permissions_value'])
      ->condition('fdfp.entity_id', $nid);
    $permission = $query->execute()->fetchField();
    $groups = $this->getGroupsByContent($nid);
    if ($permission == self::PERMISSION_RESTRICTED) {
      // Check if content belongs to a group
      if (count($groups) == 0) {
        // Set permission by role Researchers (only owner and researchers can view).
        $this->setPermissionByRole($row, self::ROLE_RESEARCHER);
      }
      else {
        // Check group access
        $groupAccess = $this->checkGroupVisibility($groups);
        // Get group content visibility
        $groupContentVisibility = $this->checkContentGroupVisibility($nid);

        // public == 0
        if ($groupAccess == 0) {
          if ($groupContentVisibility == 2)
            $this->setPermissionByGroup($row, $nid);

          $this->setPermissionByRole($row, self::ROLE_RESEARCHER);
        }
        //private == 1
        if ($groupAccess == 1) {
          // default == 0, private == 2
          if ($groupContentVisibility == 0 || $groupContentVisibility == 2)
            $this->setPermissionByGroup($row, $nid);

          $this->setPermissionByRole($row, self::ROLE_RESEARCHER);
        }
      }
    }

    if ($permission == self::PERMISSION_OPEN) {
      // Check if content belongs to a group
      if (count($groups) > 0) {
        // Check group access
        $groupAccess = $this->checkGroupVisibility($groups);
        // Get group content visibility
        $groupContentVisibility = $this->checkContentGroupVisibility($nid);

        // group public == 0
        if ($groupAccess == 0) {
          //group visibility private == 2
          if ($groupContentVisibility == 2)
            $this->setPermissionByGroup($row, $nid);
          else
            // Set permission for all users see content
            $row->setSourceProperty('permission_all_user_view', true);
        }
        //group private == 1
        if ($groupAccess == 1) {
          // group visibility default == 0, private == 2
          if ($groupContentVisibility == 0 || $groupContentVisibility == 2)
            $this->setPermissionByGroup($row, $nid);
          else
            // Set permission for all users see content
            $row->setSourceProperty('permission_all_user_view', true);
        }
      }
      else
        // Set permission for all users see content
        $row->setSourceProperty('permission_all_user_view', true);
    }

    if ($permission == self::PERMISSION_PRIVATE) {
      // Only owner can view
      $query = $this->select('node')
        ->fields('node', ['uid'])
        ->condition('node.nid', $nid);
      $owner = $query->execute()->fetchField();
      $this->permissionByUserView[] = [
        'target_id' => $owner,
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 1,
      ];
    }

    $this->setPermissionByUser($row, $nid);

    // Set the permission in the row.
    $row->setSourceProperty('permission_by_user_view', $this->permissionByUserView);
    $this->permissionByUserView = [];

    return parent::prepareRow($row);
  }

  /**
   * @throws Exception
   */
  private function setPermissionByGroup(&$row, $nid) {
    // Get all permission in the table og_membership.
    $query = $this->select('og_membership', 'ogm')
      ->fields('ogm', ['gid']);
    $query->condition('ogm.etid', $nid);
    // Get all permission by group
    $permissionByGroupView = $query->execute()->fetchCol();
    foreach ($permissionByGroupView as $key => $item) {
      $permissionByGroupView[$key] = [
        'target_id' => $item,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
      ];
    }
    // Set the permission in the row.
    $row->setSourceProperty('permission_by_group_view', $permissionByGroupView);
  }

  /**
   * @throws Exception
   */
  public function setPermissionByUser(&$row, $nid) {
    // Get all contributors
    $query = $this->select('field_data_field_pece_contributors', 'contributors')
      ->fields('contributors', ['field_pece_contributors_target_id']);
    $query->condition('contributors.entity_id', $nid);
    // Get all permission by contributors
    $users = $query->execute()->fetchCol();
    foreach ($users as $key => $item) {
      if (array_search($item, array_column($this->permissionByUserView, 'target_id')) === false) {
        $this->permissionByUserView[] = [
          'target_id' => $item,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
        ];
      }
    }
  }

  /**
   * @throws Exception
   */
  public function setPermissionByRole(&$row, $role) {
    $permissionByRoleView = [
      'target_id' => $role,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
    ];
    // Set the permission in the row.
    $row->setSourceProperty('permission_by_role_view', $permissionByRoleView);
  }


  /**
   * @throws Exception
   */
  public function checkGroupVisibility($groups): int
  {
    $visibility = 0;
    foreach ($groups as $key => $item) {
      $query = $this->select('field_data_group_access', 'fdga')
        ->fields('fdga', ['group_access_value'])
        ->condition('fdga.entity_id', $item);
      $visibility = $query->execute()->fetchField();
      //"What was once Public cannot be hidden by mistake" by Reva
      if ($visibility == 0)
        break;
    }
    return $visibility;
  }

  public function checkContentGroupVisibility($nid): int
  {
    // Check group content visibility field.
    $query = $this->select('field_data_group_content_access', 'fdgca')
      ->fields('fdgca', ['group_content_access_value'])
      ->condition('fdgca.entity_id', $nid);
    //default == 0, public == 1, private == 2
    return $query->execute()->fetchField();
  }

  public function getGroupsByContent($nid)
  {
    $query = $this->select('og_membership', 'ogm')
      ->fields('ogm', ['gid'])
      ->condition('ogm.etid', $nid);
    return $query->execute()->fetchCol();
  }
}
