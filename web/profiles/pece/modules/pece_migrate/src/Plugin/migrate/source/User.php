<?php
/**
 * @file
 * Contains \Drupal\pece_migrate\Plugin\migrate\source\User.
 */
namespace  Drupal\pece_migrate\Plugin\migrate\source;
use Drupal\migrate\Row;
use Drupal\user\Plugin\migrate\source\d7\User as D7User;
use Exception;

/**
 * Gets all users from the source.
 *
 * @MigrateSource(
 *   id = "v1_user_source",
 *   source_module = "user"
 * )
 */
class User extends D7User {

  const ROLE_RESEARCHER = 'researcher';
  const ROLE_CONTRIBUTOR = 'contributor';

  protected $permissionByUserView = [];

  public function query() {
    $query =  parent::query(); // TODO: Change the autogenerated stub

    return $query;
  }

  /**
   * {@inheritdoc}
   */
  public function fields() {
    $fields = parent::fields() + ['alias' => $this->t('Path alias')];
    $fields += ['d7_merged_roles' => $this->t('Merged roles')];
    return $fields;
  }

  /**
   * {@inheritdoc}
   * @throws Exception
   */
  public function prepareRow(Row $row) {
    $uid = $row->getSourceProperty('uid');

    $roles = $this->select('users_roles', 'ur')
      ->fields('ur', ['rid'])
      ->condition('ur.uid', $uid)
      ->execute()
      ->fetchCol();

    $rolesByNewName = array_map([$this, 'callbackRidToName'], $roles);
    $roles = array_unique($rolesByNewName);
    $row->setSourceProperty('d7_merged_roles', $roles);

    return parent::prepareRow($row);
  }

  public function callbackRidToName($id) {
    $roleMap = [
      3 => "administrator", // Administrator
      4 => "contributor", // Editor
      5 => "contributor", // Contributor
      6 => "contributor", // Researcher
      8 => "data_manager", // Data Importer
      9 => "platform_manager", // Platform Director
      10 => "platform_manager", // Manager
    ];

    return $roleMap[$id];
  }

}
